{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport Marker from \"./MapMarker\";\nimport Polyline from \"./MapPolyline\";\nimport Polygon from \"./MapPolygon\";\nexport var makeOverlays = function makeOverlays(features) {\n  var points = features.filter(function (f) {\n    return f.geometry && (f.geometry.type === 'Point' || f.geometry.type === 'MultiPoint');\n  }).map(function (feature) {\n    return makeCoordinates(feature).map(function (coordinates) {\n      return makeOverlay(coordinates, feature);\n    });\n  }).reduce(flatten, []).map(function (overlay) {\n    return _objectSpread(_objectSpread({}, overlay), {}, {\n      type: 'point'\n    });\n  });\n  var lines = features.filter(function (f) {\n    return f.geometry && (f.geometry.type === 'LineString' || f.geometry.type === 'MultiLineString');\n  }).map(function (feature) {\n    return makeCoordinates(feature).map(function (coordinates) {\n      return makeOverlay(coordinates, feature);\n    });\n  }).reduce(flatten, []).map(function (overlay) {\n    return _objectSpread(_objectSpread({}, overlay), {}, {\n      type: 'polyline'\n    });\n  });\n  var multipolygons = features.filter(function (f) {\n    return f.geometry && f.geometry.type === 'MultiPolygon';\n  }).map(function (feature) {\n    return makeCoordinates(feature).map(function (coordinates) {\n      return makeOverlay(coordinates, feature);\n    });\n  }).reduce(flatten, []);\n  var polygons = features.filter(function (f) {\n    return f.geometry && f.geometry.type === 'Polygon';\n  }).map(function (feature) {\n    return makeOverlay(makeCoordinates(feature), feature);\n  }).reduce(flatten, []).concat(multipolygons).map(function (overlay) {\n    return _objectSpread(_objectSpread({}, overlay), {}, {\n      type: 'polygon'\n    });\n  });\n  return points.concat(lines).concat(polygons);\n};\n\nvar flatten = function flatten(prev, curr) {\n  return prev.concat(curr);\n};\n\nvar makeOverlay = function makeOverlay(coordinates, feature) {\n  var overlay = {\n    feature: feature\n  };\n\n  if (feature.geometry.type === 'Polygon' || feature.geometry.type === 'MultiPolygon') {\n    overlay.coordinates = coordinates[0];\n\n    if (coordinates.length > 1) {\n      overlay.holes = coordinates.slice(1);\n    }\n  } else {\n    overlay.coordinates = coordinates;\n  }\n\n  return overlay;\n};\n\nvar makePoint = function makePoint(c) {\n  return {\n    latitude: c[1],\n    longitude: c[0]\n  };\n};\n\nvar makeLine = function makeLine(l) {\n  return l.map(makePoint);\n};\n\nvar makeCoordinates = function makeCoordinates(feature) {\n  var g = feature.geometry;\n\n  if (g.type === 'Point') {\n    return [makePoint(g.coordinates)];\n  } else if (g.type === 'MultiPoint') {\n    return g.coordinates.map(makePoint);\n  } else if (g.type === 'LineString') {\n    return [makeLine(g.coordinates)];\n  } else if (g.type === 'MultiLineString') {\n    return g.coordinates.map(makeLine);\n  } else if (g.type === 'Polygon') {\n    return g.coordinates.map(makeLine);\n  } else if (g.type === 'MultiPolygon') {\n    return g.coordinates.map(function (p) {\n      return p.map(makeLine);\n    });\n  } else {\n    return [];\n  }\n};\n\nvar doesOverlayContainProperty = function doesOverlayContainProperty(overlay, property) {\n  return overlay.feature && overlay.feature.properties && overlay.feature.properties[property];\n};\n\nvar getRgbaFromHex = function getRgbaFromHex(hex) {\n  var alpha = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n  var _hex$match$map = hex.match(/\\w\\w/g).map(function (x) {\n    return parseInt(x, 16);\n  }),\n      _hex$match$map2 = _slicedToArray(_hex$match$map, 3),\n      r = _hex$match$map2[0],\n      g = _hex$match$map2[1],\n      b = _hex$match$map2[2];\n\n  return \"rgba(\" + r + \",\" + g + \",\" + b + \",\" + alpha + \")\";\n};\n\nvar getColor = function getColor(props, overlay, colorType, overrideColorProp) {\n  if (props.hasOwnProperty(overrideColorProp)) {\n    return props[overrideColorProp];\n  }\n\n  if (doesOverlayContainProperty(overlay, colorType)) {\n    var color = overlay.feature.properties[colorType];\n    var opacityProperty = colorType + '-opacity';\n\n    if (doesOverlayContainProperty(overlay, opacityProperty) && color[0] === '#') {\n      color = getRgbaFromHex(color, overlay.feature.properties[opacityProperty]);\n    }\n\n    return color;\n  }\n\n  return null;\n};\n\nvar getStrokeWidth = function getStrokeWidth(props, overlay) {\n  if (props.hasOwnProperty('strokeWidth')) {\n    return props['strokeWidth'];\n  }\n\n  if (doesOverlayContainProperty(overlay, 'stroke-width')) {\n    return overlay.feature.properties['stroke-width'];\n  }\n\n  return null;\n};\n\nvar Geojson = function Geojson(props) {\n  var overlays = makeOverlays(props.geojson.features);\n  return React.createElement(React.Fragment, null, overlays.map(function (overlay, index) {\n    var fillColor = getColor(props, overlay, 'fill', 'fillColor');\n    var strokeColor = getColor(props, overlay, 'stroke', 'strokeColor');\n    var markerColor = getColor(props, overlay, 'marker-color', 'color');\n    var strokeWidth = getStrokeWidth(props, overlay);\n\n    if (overlay.type === 'point') {\n      return React.createElement(Marker, {\n        key: index,\n        coordinate: overlay.coordinates,\n        image: props.image,\n        pinColor: markerColor,\n        zIndex: props.zIndex\n      });\n    }\n\n    if (overlay.type === 'polygon') {\n      return React.createElement(Polygon, {\n        key: index,\n        coordinates: overlay.coordinates,\n        holes: overlay.holes,\n        strokeColor: strokeColor,\n        fillColor: fillColor,\n        strokeWidth: strokeWidth,\n        tappable: props.tappable,\n        onPress: props.onPress,\n        zIndex: props.zIndex\n      });\n    }\n\n    if (overlay.type === 'polyline') {\n      return React.createElement(Polyline, {\n        key: index,\n        coordinates: overlay.coordinates,\n        strokeColor: strokeColor,\n        strokeWidth: strokeWidth,\n        lineDashPhase: props.lineDashPhase,\n        lineDashPattern: props.lineDashPattern,\n        lineCap: props.lineCap,\n        lineJoin: props.lineJoin,\n        miterLimit: props.miterLimit,\n        zIndex: props.zIndex\n      });\n    }\n  }));\n};\n\nexport default Geojson;","map":{"version":3,"sources":["C:/xampp/htdocs/hawkesbury-app/node_modules/react-native-maps/lib/components/Geojson.js"],"names":["React","Marker","Polyline","Polygon","makeOverlays","features","points","filter","f","geometry","type","map","feature","makeCoordinates","coordinates","makeOverlay","reduce","flatten","overlay","lines","multipolygons","polygons","concat","prev","curr","length","holes","slice","makePoint","c","latitude","longitude","makeLine","l","g","p","doesOverlayContainProperty","property","properties","getRgbaFromHex","hex","alpha","match","x","parseInt","r","b","getColor","props","colorType","overrideColorProp","hasOwnProperty","color","opacityProperty","getStrokeWidth","Geojson","overlays","geojson","index","fillColor","strokeColor","markerColor","strokeWidth","image","zIndex","tappable","onPress","lineDashPhase","lineDashPattern","lineCap","lineJoin","miterLimit"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Marker from './MapMarker';\r\nimport Polyline from './MapPolyline';\r\nimport Polygon from './MapPolygon';\r\n\r\nexport const makeOverlays = features => {\r\n  const points = features\r\n    .filter(\r\n      f =>\r\n        f.geometry &&\r\n        (f.geometry.type === 'Point' || f.geometry.type === 'MultiPoint')\r\n    )\r\n    .map(feature =>\r\n      makeCoordinates(feature).map(coordinates =>\r\n        makeOverlay(coordinates, feature)\r\n      )\r\n    )\r\n    .reduce(flatten, [])\r\n    .map(overlay => ({ ...overlay, type: 'point' }));\r\n\r\n  const lines = features\r\n    .filter(\r\n      f =>\r\n        f.geometry &&\r\n        (f.geometry.type === 'LineString' ||\r\n          f.geometry.type === 'MultiLineString')\r\n    )\r\n    .map(feature =>\r\n      makeCoordinates(feature).map(coordinates =>\r\n        makeOverlay(coordinates, feature)\r\n      )\r\n    )\r\n    .reduce(flatten, [])\r\n    .map(overlay => ({ ...overlay, type: 'polyline' }));\r\n\r\n  const multipolygons = features\r\n    .filter(f => f.geometry && f.geometry.type === 'MultiPolygon')\r\n    .map(feature =>\r\n      makeCoordinates(feature).map(coordinates =>\r\n        makeOverlay(coordinates, feature)\r\n      )\r\n    )\r\n    .reduce(flatten, []);\r\n\r\n  const polygons = features\r\n    .filter(f => f.geometry && f.geometry.type === 'Polygon')\r\n    .map(feature => makeOverlay(makeCoordinates(feature), feature))\r\n    .reduce(flatten, [])\r\n    .concat(multipolygons)\r\n    .map(overlay => ({ ...overlay, type: 'polygon' }));\r\n\r\n  return points.concat(lines).concat(polygons);\r\n};\r\n\r\nconst flatten = (prev, curr) => prev.concat(curr);\r\n\r\nconst makeOverlay = (coordinates, feature) => {\r\n  let overlay = {\r\n    feature,\r\n  };\r\n  if (\r\n    feature.geometry.type === 'Polygon' ||\r\n    feature.geometry.type === 'MultiPolygon'\r\n  ) {\r\n    overlay.coordinates = coordinates[0];\r\n    if (coordinates.length > 1) {\r\n      overlay.holes = coordinates.slice(1);\r\n    }\r\n  } else {\r\n    overlay.coordinates = coordinates;\r\n  }\r\n  return overlay;\r\n};\r\n\r\nconst makePoint = c => ({ latitude: c[1], longitude: c[0] });\r\n\r\nconst makeLine = l => l.map(makePoint);\r\n\r\nconst makeCoordinates = feature => {\r\n  const g = feature.geometry;\r\n  if (g.type === 'Point') {\r\n    return [makePoint(g.coordinates)];\r\n  } else if (g.type === 'MultiPoint') {\r\n    return g.coordinates.map(makePoint);\r\n  } else if (g.type === 'LineString') {\r\n    return [makeLine(g.coordinates)];\r\n  } else if (g.type === 'MultiLineString') {\r\n    return g.coordinates.map(makeLine);\r\n  } else if (g.type === 'Polygon') {\r\n    return g.coordinates.map(makeLine);\r\n  } else if (g.type === 'MultiPolygon') {\r\n    return g.coordinates.map(p => p.map(makeLine));\r\n  } else {\r\n    return [];\r\n  }\r\n};\r\n\r\nconst doesOverlayContainProperty = (overlay, property) => {\r\n  // Geojson may have 0 for the opacity when intention is to not specify the\r\n  // opacity. Therefore, we evaluate the truthiness of the propery where 0\r\n  // would return false.\r\n  return (\r\n    overlay.feature &&\r\n    overlay.feature.properties &&\r\n    overlay.feature.properties[property]\r\n  );\r\n};\r\n\r\nconst getRgbaFromHex = (hex, alpha = 1) => {\r\n  const [r, g, b] = hex.match(/\\w\\w/g).map(x => parseInt(x, 16));\r\n  return `rgba(${r},${g},${b},${alpha})`;\r\n};\r\n\r\nconst getColor = (props, overlay, colorType, overrideColorProp) => {\r\n  if (props.hasOwnProperty(overrideColorProp)) {\r\n    return props[overrideColorProp];\r\n  }\r\n  if (doesOverlayContainProperty(overlay, colorType)) {\r\n    let color = overlay.feature.properties[colorType];\r\n    const opacityProperty = colorType + '-opacity';\r\n    if (\r\n      doesOverlayContainProperty(overlay, opacityProperty) &&\r\n      color[0] === '#'\r\n    ) {\r\n      color = getRgbaFromHex(\r\n        color,\r\n        overlay.feature.properties[opacityProperty]\r\n      );\r\n    }\r\n    return color;\r\n  }\r\n  return null;\r\n};\r\n\r\nconst getStrokeWidth = (props, overlay) => {\r\n  if (props.hasOwnProperty('strokeWidth')) {\r\n    return props['strokeWidth'];\r\n  }\r\n  if (doesOverlayContainProperty(overlay, 'stroke-width')) {\r\n    return overlay.feature.properties['stroke-width'];\r\n  }\r\n  return null;\r\n};\r\n\r\nconst Geojson = props => {\r\n  const overlays = makeOverlays(props.geojson.features);\r\n  return (\r\n    <React.Fragment>\r\n      {overlays.map((overlay, index) => {\r\n        const fillColor = getColor(props, overlay, 'fill', 'fillColor');\r\n        const strokeColor = getColor(props, overlay, 'stroke', 'strokeColor');\r\n        const markerColor = getColor(props, overlay, 'marker-color', 'color');\r\n        const strokeWidth = getStrokeWidth(props, overlay);\r\n        if (overlay.type === 'point') {\r\n          return (\r\n            <Marker\r\n              key={index}\r\n              coordinate={overlay.coordinates}\r\n              image={props.image}\r\n              pinColor={markerColor}\r\n              zIndex={props.zIndex}\r\n            />\r\n          );\r\n        }\r\n        if (overlay.type === 'polygon') {\r\n          return (\r\n            <Polygon\r\n              key={index}\r\n              coordinates={overlay.coordinates}\r\n              holes={overlay.holes}\r\n              strokeColor={strokeColor}\r\n              fillColor={fillColor}\r\n              strokeWidth={strokeWidth}\r\n              tappable={props.tappable}\r\n              onPress={props.onPress}\r\n              zIndex={props.zIndex}\r\n            />\r\n          );\r\n        }\r\n        if (overlay.type === 'polyline') {\r\n          return (\r\n            <Polyline\r\n              key={index}\r\n              coordinates={overlay.coordinates}\r\n              strokeColor={strokeColor}\r\n              strokeWidth={strokeWidth}\r\n              lineDashPhase={props.lineDashPhase}\r\n              lineDashPattern={props.lineDashPattern}\r\n              lineCap={props.lineCap}\r\n              lineJoin={props.lineJoin}\r\n              miterLimit={props.miterLimit}\r\n              zIndex={props.zIndex}\r\n            />\r\n          );\r\n        }\r\n      })}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Geojson;\r\n"]},"metadata":{},"sourceType":"module"}