{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from \"react\";\nimport MapView from \"react-native-maps\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport * as Location from \"expo-location\";\nimport businesslistingarray from \"../constants/businesslistingarray\";\nimport markericon from \"../assets/icon/marker.png\";\nexport default function MapsScreen() {\n  var _React$useState = React.useState(-33.604830165420864),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      latitude = _React$useState2[0],\n      setLatitude = _React$useState2[1];\n\n  var _React$useState3 = React.useState(150.7444978975839),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      longitude = _React$useState4[0],\n      setLongitude = _React$useState4[1];\n\n  var _React$useState5 = React.useState(null),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      location = _React$useState6[0],\n      setLocation = _React$useState6[1];\n\n  React.useEffect(function () {\n    (function _callee() {\n      var _await$Location$reque, status, data;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Location.requestForegroundPermissionsAsync());\n\n            case 2:\n              _await$Location$reque = _context.sent;\n              status = _await$Location$reque.status;\n\n              if (!(status !== \"granted\")) {\n                _context.next = 7;\n                break;\n              }\n\n              setErrorMsg(\"Permission to access location was denied\");\n              return _context.abrupt(\"return\");\n\n            case 7:\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync({}));\n\n            case 9:\n              data = _context.sent;\n              setLocation(data);\n              updateState(data);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var updateState = function updateState(data) {\n    setLatitude(data.coords.latitude);\n    setLongitude(data.coords.longitude);\n  };\n\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(MapView, {\n    style: styles.map,\n    loadingEnabled: true,\n    showsUserLocation: true,\n    initialRegion: {\n      latitude: latitude,\n      longitude: longitude,\n      latitudeDelta: 0.015,\n      longitudeDelta: 0.0121\n    }\n  }, businesslistingarray && businesslistingarray.map(function (marker, index) {\n    return React.createElement(MapView.Marker, {\n      key: index,\n      coordinate: {\n        latitude: marker.coordinate.latitude,\n        longitude: marker.coordinate.longitude\n      },\n      title: marker.name\n    }, React.createElement(React.Fragment, null, React.createElement(Image, {\n      source: marker.category == \"business\" || marker.category == \"event\" ? require(\"../assets/icon/marker.png\") : require(\"../assets/icon/mountain.png\"),\n      style: {\n        tintColor: marker.category == \"business\" ? 'blue' : marker.category == \"event\" ? 'red' : null,\n        height: 30,\n        width: 30\n      }\n    })));\n  })));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  map: {\n    width: Dimensions.get(\"window\").width,\n    height: Dimensions.get(\"window\").height\n  }\n});","map":{"version":3,"sources":["C:/xampp/htdocs/hawkesbury-app/src/screens/MapsScreen.js"],"names":["React","MapView","Location","businesslistingarray","markericon","MapsScreen","useState","latitude","setLatitude","longitude","setLongitude","location","setLocation","useEffect","requestForegroundPermissionsAsync","status","setErrorMsg","getCurrentPositionAsync","data","updateState","coords","styles","container","map","latitudeDelta","longitudeDelta","marker","index","coordinate","name","category","require","tintColor","height","width","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","Dimensions","get"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport MapView from \"react-native-maps\";\r\nimport { StyleSheet, Text, View, Dimensions, Image } from \"react-native\";\r\nimport * as Location from \"expo-location\";\r\nimport businesslistingarray from \"../constants/businesslistingarray\";\r\nimport markericon from \"../assets/icon/marker.png\";\r\n\r\nexport default function MapsScreen() {\r\n  const [latitude, setLatitude] = React.useState(-33.604830165420864);\r\n  const [longitude, setLongitude] = React.useState(150.7444978975839);\r\n  const [location, setLocation] = React.useState(null);\r\n\r\n  React.useEffect(() => {\r\n    (async () => {\r\n      let { status } = await Location.requestForegroundPermissionsAsync();\r\n      if (status !== \"granted\") {\r\n        setErrorMsg(\"Permission to access location was denied\");\r\n        return;\r\n      }\r\n\r\n      let data = await Location.getCurrentPositionAsync({});\r\n\r\n      setLocation(data);\r\n      updateState(data);\r\n    })();\r\n  }, []);\r\n  const updateState = (data) => {\r\n    setLatitude(data.coords.latitude);\r\n    setLongitude(data.coords.longitude);\r\n    // console.log(location.coords.latitude);\r\n  };\r\n  return (\r\n    <View style={styles.container}>\r\n      <MapView\r\n        style={styles.map}\r\n        loadingEnabled={true}\r\n        showsUserLocation={true}\r\n        initialRegion={{\r\n          latitude: latitude,\r\n          longitude: longitude,\r\n          latitudeDelta: 0.015,\r\n          longitudeDelta: 0.0121,\r\n          \r\n        }}\r\n      >\r\n        {businesslistingarray &&\r\n          businesslistingarray.map((marker, index) => (\r\n            <MapView.Marker\r\n              key={index}\r\n              coordinate={{\r\n                latitude: marker.coordinate.latitude,\r\n                longitude: marker.coordinate.longitude,\r\n              }}\r\n              //image={marker.category == 'business' || marker.category == 'event' ?require ('../assets/icon/marker.png'):require ('../assets/icon/mountain.png')}\r\n              title={marker.name}\r\n            >\r\n              <>\r\n                <Image\r\n                  source={\r\n                    marker.category == \"business\" || marker.category == \"event\"\r\n                      ? require(\"../assets/icon/marker.png\")\r\n                      : require(\"../assets/icon/mountain.png\")\r\n                  }\r\n                  style={{\r\n                    tintColor:marker.category == \"business\"\r\n                    ? 'blue' :(marker.category == \"event\")? 'red':null,\r\n                    height:30,\r\n                    width:30\r\n                  }}\r\n                />\r\n              </>\r\n            </MapView.Marker>\r\n          ))}\r\n      </MapView>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: \"#fff\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  map: {\r\n    width: Dimensions.get(\"window\").width,\r\n    height: Dimensions.get(\"window\").height,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}